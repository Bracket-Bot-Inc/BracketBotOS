#!/usr/bin/env python3
import os, argparse, subprocess, shutil, pwd, json
from pathlib import Path
BRACKETBOT_DIR = Path(__file__).parent.absolute()
BIN_DIR = BRACKETBOT_DIR / "bin"
DAEMONS_DIR = BRACKETBOT_DIR / "bbos" / "daemons"
SYSTEMD_DIR = "/etc/systemd/system"
CURRENT_USER = pwd.getpwuid(os.getuid()).pw_name
APP_DIRS = " ".join([str(p) for p in [BRACKETBOT_DIR / "apps"]])
SERVICES = {
    "hotspot": {"type": "oneshot", "as_user": False, "env": ""},
    "manager": {"type": "simple", "as_user": True, 
                "exec_start": f"{DAEMONS_DIR}/manager/result/bin/manager {DAEMONS_DIR}", 
                "env": f""},
    "app_manager": {"type": "simple", 
            "exec_start": f"/bin/bash -c -l 'uv run {BIN_DIR}/app_manager {APP_DIRS}'",
            "as_user": True,
            "env": "PATH=/home/{CURRENT_USER}/.local/bin:/usr/local/bin:/usr/bin"}
}

SERVICE_TEMPLATE = """
[Unit]
Description={daemon} Service
BindsTo=sys-subsystem-net-devices-wlan0.device
After=network.target NetworkManager.service
BindsTo=sys-subsystem-net-devices-wlan0.device

[Service]
{user_block}
Type={type}
ExecStart={exec_start}
RemainAfterExit=yes
Environment={env}
[Install]
WantedBy=multi-user.target
"""


def check_and_install_nix():
    if shutil.which("nix"):
        print("[+] Nix is already installed.")
        return
    print("[*] Installing Nix...")
    subprocess.run(
        ["bash", "-c", "curl -L https://nixos.org/nix/install | bash"],
        check=True)
    bashrc = Path.home() / ".bashrc"
    append_if_not_exists("source ~/.nix-profile/etc/profile.d/nix.sh", bashrc)
    print("[!] Nix installation complete.")
    os.execvp("bash",
              ["bash", "-l", "-c", f"_NIX_INSTALLED=1 uv run {__file__}"])

def install_cursorrules():
    print("[*] Installing cursorrules...")
    shutil.copytree(BRACKETBOT_DIR / ".cursor", BRACKETBOT_DIR.parent / ".cursor", dirs_exist_ok=True)
    print("[!] cursor rules installation complete.")

def setup_vscode():
    print("[*] Setting up vscode settings in ~/.vscode/settings.json...")
    settings_json = {
        "search.exclude": {
            "**/.*": True
        },
        "files.exclude": {
            "**/.*": True
        }
    }
    settings_file = Path.home() / ".vscode" / "settings.json"
    settings_file.parent.mkdir(parents=True, exist_ok=True)
    with open(settings_file, 'w') as f:
        json.dump(settings_json, f, indent=2)
    print("[!] vscode setup complete.")

def setup_cli_tools():
    bashrc = Path.home() / ".bashrc"
    bashrc.touch(exist_ok=True)
    bashrc_content = bashrc.read_text()
    if (Path.home() / ".atuin").exists():
        print("[+] Atuin is already installed.")
    else:
        print("Installing Atuin (shell history)...")
        subprocess.run(["bash", "-c", "curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh"], check=True)
        print("Configuring Atuin in ~/.bashrc (disabling up-arrow)...")
        # Remove existing atuin init lines

        lines = bashrc_content.splitlines()
        filtered_lines = [line for line in lines if 'eval "$(atuin init' not in line]
        with open(bashrc, 'w') as f:
            f.write('\n'.join(filtered_lines))
            f.write('eval "$(atuin init bash --disable-up-arrow)" # Initialize Atuin (history sync, disable up-arrow override)\n')
    if shutil.which("zoxide"):
        print("[+] Zoxide is already installed.")
    else:
        print("Installing zoxide (directory navigation)...")
        subprocess.run(["bash", "-c", "curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh"], check=True)
        print("Configuring zoxide in ~/.bashrc...")
        if 'eval "$(zoxide init bash)"' not in bashrc_content:
            with open(bashrc, 'a') as f:
                f.write('eval "$(zoxide init bash)" # Initialize Zoxide\n')
    print("[!] Shell tools setup complete.")

def check_and_install_uv():
    if shutil.which("uv"):
        print("[+] uv is already installed.")
        return
    print("[*] Installing uv...")
    subprocess.run(
        ["bash", "-c", "curl -LsSf https://astral.sh/uv/install.sh | sh"],
        check=True)
    bashrc = Path.home() / ".bashrc"
    append_if_not_exists("source ~/.cargo/env", bashrc)
    print("[!] uv installation complete.")


def build_daemon(path: Path):
    print(f"\033[1;32mBuilding {path.name}...\033[0m")  # bold green

    shell_nix = path / "shell.nix"
    default_nix = path / "default.nix"

    if shell_nix.exists():
        subprocess.run(["nix-shell", "--run", "true"], cwd=path, check=True)
    elif default_nix.exists():
        subprocess.run(
            ["nix-build",
             str(default_nix), "-o",
             str(path / "result")],
            check=True)

    else:
        raise FileNotFoundError(f"No shell.nix or default.nix found in {path}")


def append_if_not_exists(line, file):
    file = Path(file)
    file.touch(exist_ok=True)
    lines = [
        l.rstrip("\n") for l in file.read_text().splitlines() if l.strip()
    ]
    if any(l.strip() == line.strip() for l in lines):
        return
    print(f"Appending to {file}")
    with file.open("a") as f:
        f.write(f"\n{line}\n")


def add_paths_to_shell_profiles(paths):
    export_line = "export PATH=" + ":".join(str(p) for p in paths) + ":$PATH"
    home = Path.home()
    profiles = [
        home / ".bashrc",
    ]
    for profile in profiles:
        append_if_not_exists(export_line, profile)


def install_service(daemon: str, exec_start: str, cfg: dict) -> None:
    service_file = Path(SYSTEMD_DIR) / f"{daemon}.service"

    # build the unit text
    user_block = (f"User={CURRENT_USER}\nGroup={CURRENT_USER}") if cfg['as_user'] else ""
    unit_text  = SERVICE_TEMPLATE.format(daemon=daemon,
                                  exec_start=cfg.get('exec_start', exec_start),
                                  type=cfg['type'],
                                  user_block=user_block,
                                  env=cfg['env'])

    # write + enable + start
    subprocess.run(["sudo", "tee", str(service_file)],
                   input=unit_text.encode(), check=True)
    subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
    subprocess.run(["sudo", "systemctl", "enable", service_file.name], check=True)
    subprocess.run(["sudo", "systemctl", "start",  service_file.name],  check=False)

    print(f"[âœ“] {daemon}.service installed; will run as {CURRENT_USER if cfg['as_user'] else 'root'}.")


def main():
    check_and_install_uv()
    check_and_install_nix()
    setup_vscode()
    setup_cli_tools()
    install_cursorrules()

    add_to_PATH = []
    # build
    for p in [d for d in DAEMONS_DIR.iterdir() if d.is_dir()]:
        if (p / "default.nix").exists() or (p / "shell.nix").exists():
            build_daemon(p)
            if (p / "default.nix").exists():
                add_to_PATH.append(p / "result" / "bin")
        else:
            print(f"Skipping {p} because it doesn't have a default.nix or shell.nix")
    # install
    for service in SERVICES:
        p = DAEMONS_DIR / service
        exec_path = f"{p.resolve()}/result/bin/{service}"
        install_service(service, exec_path, SERVICES[service])

    if add_to_PATH:
        add_to_PATH.append(str(Path(__file__).parent.absolute() / 'bin'))
        add_paths_to_shell_profiles(add_to_PATH)
        shell = os.environ.get("SHELL", "/bin/bash")
    
    print("Done!")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--only",
                        nargs="+",
                        default=None,
                        help="List of daemons to build/install")
    args = parser.parse_args()

    main()
