#!/usr/bin/env python3
import os, argparse, subprocess, shutil
from pathlib import Path

DAEMONS_DIR = Path(__file__).parent.absolute() / "bbos" / "daemons"
SYSTEMD_DIR = "/etc/systemd/system"

SERVICES = ["hotspot", "manager"]

SERVICE_TEMPLATE = """
[Unit]
Description={daemon} Service
BindsTo=sys-subsystem-net-devices-wlan0.device
After=network.target NetworkManager.service
BindsTo=sys-subsystem-net-devices-wlan0.device

[Service]
Type=oneshot
ExecStart={setup_script}
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
"""


def check_and_install_nix():
    if shutil.which("nix"):
        print("[+] Nix is already installed.")
        return
    print("[*] Installing Nix...")
    subprocess.run(
        ["bash", "-c", "curl -L https://nixos.org/nix/install | bash"],
        check=True)
    bashrc = Path.home() / ".bashrc"
    append_if_not_exists("source ~/.nix-profile/etc/profile.d/nix.sh", bashrc)
    print("[!] Nix installation complete.")
    os.execvp("bash",
              ["bash", "-l", "-c", f"_NIX_INSTALLED=1 python3 {__file__}"])


def generate_openssl_cert(days=30):
    cert_dir = Path.home() / ".auth"
    cert_dir.mkdir(exist_ok=True)

    key_path = cert_dir / "key.pem"
    cert_path = cert_dir / "cert.pem"

    if key_path.exists() and cert_path.exists():
        print("OpenSSL Cert exists! Skipping...")
        return
    subprocess.run([
        "openssl",
        "req",
        "-x509",
        "-nodes",
        "-newkey",
        "rsa:2048",
        "-keyout",
        str(key_path),
        "-out",
        str(cert_path),
        "-days",
        str(days),
        "-subj",
        f"/CN=bracketbot.home",
    ],
                   check=True)


def build_daemon(path: Path):
    print(f"\033[1;32mBuilding {path.name}...\033[0m")  # bold green

    shell_nix = path / "shell.nix"
    default_nix = path / "default.nix"

    if shell_nix.exists():
        subprocess.run(["nix-shell", "--run", "true"], cwd=path, check=True)
    elif default_nix.exists():
        subprocess.run(
            ["nix-build",
             str(default_nix), "-o",
             str(path / "result")],
            check=True)

    else:
        raise FileNotFoundError(f"No shell.nix or default.nix found in {path}")


def append_if_not_exists(line, file):
    file = Path(file)
    file.touch(exist_ok=True)
    lines = [
        l.rstrip("\n") for l in file.read_text().splitlines() if l.strip()
    ]
    if any(l.strip() == line.strip() for l in lines):
        return
    print(f"Appending to {file}")
    with file.open("a") as f:
        f.write(f"\n{line}\n")


def add_paths_to_shell_profiles(paths):
    export_line = "export PATH=" + ":".join(str(p) for p in paths) + ":$PATH"
    home = Path.home()
    profiles = [
        home / ".bashrc",
    ]
    for profile in profiles:
        append_if_not_exists(export_line, profile)


def install_service(daemon: str, path: Path):
    setup_script = f"{path.resolve()}/result/bin/{daemon}"
    service_file = f"{SYSTEMD_DIR}/{daemon}.service"

    print(f"Installing systemd service for {daemon} at {service_file}")
    subprocess.run(["sudo", "chmod", "+x", setup_script], check=True)

    service_content = SERVICE_TEMPLATE.format(daemon=daemon,
                                              setup_script=setup_script)
    subprocess.run(["sudo", "tee", service_file],
                   input=service_content.encode(),
                   check=True)

    subprocess.run(["sudo", "systemctl", "daemon-reload"], check=False)
    subprocess.run(["sudo", "systemctl", "enable", f"{daemon}.service"],
                   check=False)
    subprocess.run(["sudo", "systemctl", "start", f"{daemon}.service"],
                   check=False)
    print(f"{daemon} service installed and started.")


def main():
    ap = argparse.ArgumentParser(prog="install",
                                 description="Installs bracketbot ")
    ap.add_argument("--only",
                    metavar="NAME",
                    nargs="*",
                    default=None,
                    help="Daemons to install (space-separated list)")
    args = ap.parse_args()
    check_and_install_nix()
    generate_openssl_cert()

    add_to_PATH = []
    for p in [d for d in DAEMONS_DIR.iterdir() if d.is_dir()]:
        daemon = p.name
        if (p / "default.nix").exists() or (p / "shell.nix").exists():
            build_daemon(p)
            if (p / "default.nix").exists():
                add_to_PATH.append(p / "result" / "bin")
        else:
            print(f"Skipping {p} because it doesn't have a default.nix or shell.nix")
        if daemon in SERVICES:
            install_service(daemon, p)

    if add_to_PATH:
        add_to_PATH.append(str(Path(__file__).parent.absolute() / 'bin'))
        add_paths_to_shell_profiles(add_to_PATH)
        shell = os.environ.get("SHELL", "/bin/bash")
        os.execlp(shell, shell, "-l")  # resets shell


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--only",
                        nargs="+",
                        default=None,
                        help="List of daemons to build/install")
    args = parser.parse_args()

    main()
